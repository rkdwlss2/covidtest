---------------------------------------------------
11. [ 템플릿사용
       - 리스트, 딕셔너리, 튜플 정의 후 웹 페이지로 출력] 
---------------------------------------------------
// app.py에서 딕셔너리, 튜플, 리스트 정의후 html 파일에서 출력하기 

1) 파이썬 파일 app.py 에서 
   라우터 함수안에 
   변수와 집합형 변수(딕셔너리, 튜플, 리스트 ...) 정의 

2) 라우터 함수안의 return 문과 render_template 로 변수 값 전달 
   
   return render_template('html파일명', 변수이름1=변수이름2...)

   예)
    @app.route('/')
    def index():
        # 리스트 생성
        test_list = [100, 200, 300, 400]

        # 변수 생성
        userName = '홍길동'

        return render_template('index.html',test_list=test_list, userName=userName)

3) 연결된 html 문서에서 라우터 함수로 전달된 변수 전달받아 출력하기 
    {{변수명}} 으로 변수값 출력 
    {{딕셔너리.키}} 로 딕셔너리값 출력
    {{리스트이름[인덱스]}} 로 리스트값 출력
    {{튜플이름[인덱스]}} 로 튜플값 출력



---------------------------------------------------
12. [ 템플릿사용 - for..range.. 문 이용하기 ]
---------------------------------------------------

// HTML 문서에서 파이썬 반복문 for 이용하기

{% for i in range(start, end, step) %}
  {{ 변수나 값 }}
{% endfor %}

// 중첩 for 문
{% for i in range(start, end, step) %}
    {% for j in range(start, end, step) %}
        {{ 변수나 값 }}
    {% endfor %}
{% endfor %}






---------------------------------------------------
13. [ 템플릿사용 - for 문을 이용하여 콜렉션 데이타값 출력하기 ]
---------------------------------------------------
// app.py에서 리스트, 튜플, 딕셔너리 정의 후
   html 문서에서 for.. 이용하여 출력하기

# for .. in 문을 이용한 집합형 데이타 출력 

   for i in 리스트이름:
    명령문

   for i in 튜플이름:
    명령문

   for key in 딕셔너리이름:
        print(key, 딕셔너리[key])

   for key, value in 딕셔너리.items():
        print(key,' : ', value)


// 실습 과정 

1) app.py 에서 집합형 자료 정의 후 return 문을 이용하여 전송 

def index() :
    # 리스트 정의
    test_list = ['붉은돼지', '라이온킹', '토토로']
    for i in test_list:
        print(i)

    # 튜플 정의
    test_tuple = (10, 20, 30, 40, 50)
    for i in test_tuple:
        print(i)

    # 딕셔너리 정의
    test_dic = {
        'key1' : 100,
        'key2' : 'abcdefg'
    }
    for key in test_dic:
        print(key, test_dic[key])

    for key, value in test_dic.items():
        print(key,' : ', value)

    return render_template('index_forIn.html', test_list=test_list,
                    test_tuple=test_tuple, test_dic=test_dic )


2) HTML 문서에서 {% for i in ... %} ~ {% endfor %} 로 데이타 출력 

    <h2> 리스트 </h2>

    <ul>
    {% for i in test_list %}
        <li>{{i}}</li>
    {% endfor %}
    </ul>
    <h2> 튜플 </h2>

    <ul>
    {% for i in test_tuple %}
        <li>{{i}}</li>
    {% endfor %}
    </ul>


    <h2> 딕셔너리 </h2>

    <ul>
    {% for key in test_dic %}
        <li>{{test_dic[key]}}</li>
    {% endfor %}
    </ul>
    <hr>
    <ul>
    {% for key, value in test_dic.items() %}
        <li>key : {{ key }}, value : {{ value }} </li>
    {% endfor %}
    </ul>






---------------------------------------------------
14. 템플릿사용 - if 문을 이용하기
---------------------------------------------------
// html 문서에서 제어문 이용하기

    {% if 조건식 %}
        {{ 값 }} 또는 태그, 문자열
    {% elif 조건식 %}
        {{ 값 }} 또는 태그, 문자열
    {% else %}
        {{ 값 }} 또는 태그, 문자열
    {% endif %}


// 실습 과정 

1) app.py 에서 변수와 값 지정
@app.route("/")
def index() :
    age = 12
    n = 12
    return render_template('index.html', userAge = age, n = n )

2) index.html 에서
  데이타값에 따라 메세지 출력하기
    <h2> userAge 에 따라 메세지 출력하기  </h2>

    {% if userAge >= 20 %}
        <p> {{userAge}} : 성인 </p>
    {% else %}
        <p> {{userAge}} : 미성년자 </p>
    {% endif %}

    <h2> 양수,음수,0 메세지 출력하기  </h2>
    {% if n > 0 %}
        <p> {{n}} : 양수 </p>
    {% elif n == 0 %}
        <p> {{n}} : 0 </p>
    {% else %}
        <p> {{n}} : 음수 </p>
    {% endif %}




---------------------------------------------------
15. [템플릿사용 - 폼에서 입력받아 연산 결과 출력하기]
---------------------------------------------------

// HTML 폼에서 입력받은 데이터를 파이썬 파일에 전달한 후 웹문서에 출력하기 


1) index.html 파일에 폼 생성

<!-- method 값을 post 로 지정. action 값은 처리 라우터 등록 주소 -->
<!-- name은 전달 변수로 지정 -->
<h2> POST 방식으로 데이터 전달하기</h2>
<form action="/cal" method="post">
    <input type="text" name="data1" placeholder="data1"/><br/>
    <input type="text" name="data2" placeholder="data2"/><br/>
    <button>확인</button>
</form>

2) app.py에서 데이타 파라미터 추출후 변수 저장
   cal.html에 데이터 전달

# request.form['변수']로 변수값 전달 
@app.route("/cal", methods=['POST'])
def result() :
    # 파라미터 데이터를 추출한다.
    data1 = request.form['data1']
    data2 = request.form['data2']
    # 아래는 String이라서 오류 발생 => 자료형 변환 필요
    # return render_template('cal.html',data1=data1, data2=data2)
    return render_template('cal.html',data1=int(data1), data2=int(data2))

3) templates/cal.html 파일 생성 후
   전달받은 데이터를 이용하여 계산식 완료
   {{변수}} 로 연산식 적용해서 출력 


    <ul>
        <li>{{data1}} + {{data2}} = {{data1+data2}} </li>
        <li>{{data1}} - {{data2}} = {{data1-data2}} </li>
        <li>{{data1}} * {{data2}} = {{data1*data2}} </li>
        <li>{{data1}} / {{data2}} = {{data1/data2}} </li>
    </ul>





-------------------------------------------------------------------------------
16. [템플릿사용 - GET 방식으로 데이타 전달받아 결과 출력하기]
-------------------------------------------------------------------------------


// HTML 폼에서 GET 방식으로 입력받은 데이터를 파이썬 파일에 전달한 후 웹문서에 출력하기 

request.args['변수']


1) index.html 파일에 폼 생성

<!-- method 값을 get 로 지정. action 값은 처리 라우터 등록 주소 -->
<!-- name은 전달 변수로 지정 -->
 <h2> 2개의 값을 입력받아라 </h2>
  <form action="/resultCal" method="get">
    <input type="text" name="data1" placeholder="첫번째 숫자 입력"> <br>
    <input type="text" name="data2" placeholder="두번째 숫자 입력">
    <button>확인</button>
  </form>


  <h2> 숫자값을 입력받은 후 구구단 출력하기 </h2>
  <form action="/resultGugu" method="get">
    <input type="text" name="myNumber" placeholder="숫자 입력">
    <button>확인</button>
  </form>


  <h2> 누적합 출력하기 </h2>
  <form action="/resultSum" method="get">
    <input type="text" name="myNumber2" placeholder="숫자 입력">
    <button>확인</button>
  </form>


2) app.py에서 데이타 파라미터 추출후 변수 저장
   html 출력 파일에 데이터 전달

# request.args['변수']로 변수값 전달 
# GET 방식으로 값을 전달받아서 특정 변수에 저장하기
# 데이타변수1 =  request.args['텍스트필드변수명']
@app.route('/resultCal', methods=['GET'])
def result():
    data1 = request.args['data1']
    data2 = request.args['data2']
    print(data1, data2, request.method)
    return render_template('resultCal.html', data1=int(data1), data2=int(data2))


@app.route('/resultGugu', methods=['GET'])
def resultGugu():
    myNumber = request.args['myNumber']
    print(myNumber)
    return render_template('resultGugu.html', myNumber=int(myNumber))

@app.route('/resultSum', methods=['GET'])
def resultSum():
    myNumber2 = int(request.args['myNumber2'])
    print(myNumber2)
    resultSum = 0
    for i in range(1, myNumber2+1) :
        resultSum += i

    return render_template('resultSum.html', myNumber2=int(myNumber2), resultSum=resultSum )


3) templates/파일명.html 파일 생성 후
   전달받은 데이터를 이용하여 계산식 완료
   {{변수}} 로 연산식 적용해서 출력 


    <ul>
        <li>{{data1}} + {{data2}} = {{data1+data2}} </li>
        <li>{{data1}} - {{data2}} = {{data1-data2}} </li>
        <li>{{data1}} * {{data2}} = {{data1*data2}} </li>
        <li>{{data1}} / {{data2}} = {{data1/data2}} </li>
    </ul>









-------------------------------------------------------------------------------
17. [템플릿사용 - GET 방식으로 하이퍼링크로 데이타 전달하고 결과 출력하기]
-------------------------------------------------------------------------------

// GET 방식으로 하이퍼링크로 데이타 전달하고 결과 출력하기

- 하이퍼링크로 변수와 값 전달 
<a href="/라우터주소?변수1=값1&변수2=값2">...</a>

- get 방식으로 변수와 갑 전달받아 처리하기 
변수1 = request.args['변수1']

- html 결과 값 출력하기 
{{ 변수 }}



1) index.html 파일

<h2>GET 방식으로 URL에 데이터 전달하기</h2>
<!--
/라우터에등록한URL?변수1=값1&변수2=값2...
-->
<a href="/cal?num=3">3단 출력</a><br/>
<a href="/cal?num=11">11단 출력</a><br/>
<hr/>



2) app.py
# GET 방식으로 값을 전달받아서 특정 변수에 저장하기
# 데이타변수 = request.args['데이타변수']
@app.route('/resultAge', methods=['GET'])
def result():
    userAge = request.args['userAge']
    print(userAge, type(userAge))
    return render_template('resultAge.html', userAge=userAge)

...


3) resultAge.html
<h2> userAge => {{ userAge }}</h2>






---------------------------------------------------------------
18. 템플릿사용 - 쿼리스트링 방식으로 데이터값 입력받아 결과 출력하기 
---------------------------------------------------------------
// 쿼리스트링 방식으로 데이터값 입력받아 결과 출력하기 

- html 문서에서 하이퍼링크 태그로 값 전달하기 
<a href="/라우터주소/값1/값2..."> ... </a>

- app.py 파일에서 라우터함수안에 '라우터주소/<자료형:변수>'로 데이타값 전달받기 
- 변수로 저장후 render_template()로 데이타값 전달하기 


@app.route('/라우터주소/<자료형:변수>')
def 라우터함수(변수) :
    변수 = 변수
    ...
    return render_template('html문서명', 변수=변수)

- html 문서에 출력하기 
{{ 변수 }}


1) index_get3.html


<h2> 데이터 전달 - 쿼리스트링 </h2>
<ul>
    <li><a href="/resultTotal/50"> num=50, 1~50까지 합구하기 </a></li>
    <li><a href="/resultTotal/100"> num=100, 1~100까지 합구하기 </a></li>
    <li><a href="/resultMul/10/20/30">세수의 곱구하기</a></li>
    <li><a href="/resultInfo/홍길동/1학년/5">학생정보 출력하기</a></li>
</ul>



2) app.py

# 주소URL뒤에 <값>을 리턴하기
# /주소/<값1>/<데이타형:값2>

@app.route('/resultInfo/<userName>/<grade>/<int:no>')
def resultInfo(userName, grade, no):
    userName = userName
    grade = grade
    no = no
    return render_template('resultInfo.html', userName=userName, grade=grade, no=no)




3) resultInfo.html

<h1>학생 정보 출력하기</h1>
<hr>
<ul>
  <li> 학생 이름 : {{userName}}</li>
  <li> 학년 : {{grade}}</li>
  <li> 학번 : {{no}}</li>
  <li> <a href="/">첫 페이지로 이동</a></li>
</ul>





---------------------------------------------------
19. 템플릿 상속과 static 폴더
---------------------------------------------------

// 템플릿 상속이란?
- 웹페이지 문서에서 공통적인 HTML 소스를 삽입하는 기능 
- php, asp 웹프로그래밍 언어의 인클루드 


// 레이아웃이 되는 html 파일에서 변경될 부분만 다음과 같이 설정
{% block 블록이름 %}
실제내용 부분들
{% endblock %}


// 레이아웃을 상속받을 html 파일에서 상속받기 소스
{% extends 'layout.html' %}

// static 폴더 
- html 문서에 삽입되는 이미지, css, js 파일은 별도의 static 폴더에 저장 
- 삽입시 경로는 static/파일이름.확장자 



// 실습 과정 

1) layout.html 
- 레이아웃 파일에 반복되는 공통 메뉴와 카피라이트 지정 
- 내용이 교체되는 블록 구역 정의

<div class="container">
   <!--  공통 메뉴    -->
    <div class="nav">
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/about">About</a></li>
            <li><a href="/bbs">BBS</a></li>
            <li><a href="/news">News</a></li>
        </ul>
    </div>
    <!--   실제 내용 -->
    <div>
    {% block pageTitle %}{% endblock %}
     <hr>
    {% block contents %}{% endblock %}
    </div>

    <div>
        <p>copyrights&copy;FlaskWorld</p>
    </div>
</div>


2) layout.html 파일을 상속받아 서브 파일 생성
  home.html , about.html, bbs.html, news.html
  - staic 폴더에 삽입 이미지 복사 붙여넣기 
  - layout.html 파일 상속받기 
  - 교체 내용은 block 정의 부분안에 삽입 


<!--layout.html 공통부분 상속 -->
{% extends 'layout.html' %}

{% block pageTitle %}
<h1> Home </h1>
{% endblock %}

{% block contents %}
<p>시작페이지</p>
<div>
    <img src="static/images/course01.jpg" alt="course01">
</div>
{% endblock %}


3) app.py 에서 라우팅 => 주소 생성

@app.route('/')
def home():
    return render_template('home.html')

...



