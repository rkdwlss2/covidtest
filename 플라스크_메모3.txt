
---------------------------------------------------
20. mySql 샘플DB 준비하기 
---------------------------------------------------
-- mySQL 미설치시 진행 
# https://dev.mysql.com/downloads/file/?id=486089
# No thanks, just start my download. 클릭후 다운로드
# 다운로드 파일명 :
# mysql-installer-community-8.0.16.0.msi


-- 샘플 DB 설치하기 : sample_employees.sql, sample_world.sql 
/*
0) 자료실에서 sample_employees.sql, sample_world.sql  다운로드 
1) mySQL 워크벤치 root 계정으로 접속 
2) [Server] - [Data Import] 명령 실행 
3) [Data Import] 대화상자에서 [Import from Self-contained File] 선택 
	파일 경로를 다운로드 받은 sample_world.sql 파일 선택 
4) [Default Schema to be Imported To] 에서 
	[New] 클릭 후 신규 데이타베이스명 지정 - sample1
5) [Start Import] 클릭 
6) [Navigator] 창에서 새로고침한후 데이타 베이스  sample1 확인 
7) sample_employees.sql 같은 방법으로 sample2 데이타베이스로 임포트 
*/


-- 데이타베이스 사용하기 
-- USE 데이타베이스명;
USE sample1;

-- 현재 어떤 DB가 있는지 보기
-- SHOW 데이타베이스명;
SHOW DATABASES;


-- 테이블 이름만 간단히 보기
SHOW TABLES; 

-- 테이블 구조 확인하기 
-- DESCRIBE(DESC) 테이블명;
DESCRIBE country; 
DESC country;

-- 테이블 레코드 표시하기 : SELECT
-- SELECT * FROM 데이타베이스명.테이블명;
-- SELECT * FROM 테이블명;
SELECT * FROM country;
SELECT * FROM sample2.employees;

-- 특정 테이블의 총 갯수 확인하기 
SELECT count(*) FROM country;
SELECT count(*) FROM sample2.employees;


---------------------------------------------------
21.가상환경에서 모듈 설치후 데이타베이스 연동하기 
---------------------------------------------------
// 가상환경에 mySQL을 연동할 수 있는 pymysql 설치하기 
가상환경 활성화
(.venv) pip install pymysql
(.venv) pip list


//DB 연결되는지 테스트
1) pyMySQL 모듈 임포트 
2) DB 연결
3) 커서 생성 
4) 테이블 => 리스트로 저장 
5) 테이블 => 딕셔너리 리스트로 저장 




---------------------------------------------------
22. 테이블 레코드를 html 파일로 출력하기 
---------------------------------------------------

// 실습 과정 
1) db.py 파일 생성
- 데이타베이스 접속 함수 정의 
- 테이블 레코드 => 딕셔너리 리스트 구조로 저장하는 함수 정의 


import pymysql

# 데이터 베이스에 접속하는 함수
def get_connection() :
    conn = pymysql.connect(host='127.0.0.1', user='root',
            password='12345678', db='sample1'
            , charset='utf8')
    if conn:
        print('f 디비 접속 완료')
    return conn


# worldCity 테이블 전체 목록을 가져오는 함수
def get_country_list() :
    # 데이터베이스 접속
    conn = get_connection()

    # 작업변수 생성
    cursor = conn.cursor()

    # 쿼리문
    sql = '''SELECT * FROM worldCity  '''
    cursor.execute(sql)

    # 결과를 가져온다.
    result = cursor.fetchall()

    # 데이터를 추출한다.
    # 딕셔너리 리스트 구조
    temp_list = []

    # 리스트안의 딕셔너리 구조화
    for row in result :
        temp_dic = {}
        temp_dic['No'] = row[0]
        temp_dic['Code'] = row[1]
        temp_dic['Name'] = row[2]
        temp_dic['GNP'] = row[3]
        temp_dic['Population'] = row[4]
        temp_list.append(temp_dic)

    conn.close()
    return temp_list



2) app.py 파일 생성
- db.py를 모듈로 임포트 
- 라우터 주소 및 라우터 함수 정의 
- 라우터 함수 안에서 db에 정의된 함수 이용하여 
  테이블=>딕셔너리 리스트를 return 문을 이용하여 html 문서로 반환

from flask import Flask, render_template, request
import db

# Flask 객체 생성
app = Flask(__name__)

# 라우터 주소 함께 사용 : /, /country_list
@app.route('/')
# DB 테이블의 레코드 반환후 html 파일로 레코드 총수와 함께 전달 
@app.route('/country_list')
def country_list() :
    country_list = db.get_country_list()
    return render_template('country_list.html', country_list=country_list, totalCount=len(country_list))

app.run(host='127.0.0.1', port=5000, debug=True)


3) country_list.html
- for 문과 템플릿 문법 이용하여 테이블의 레코드를 표 구조로 출력 

<!--  행인덱스[키], 행인덱스.키명 으로 접근 -->
            {% for temp_dic in country_list %}
            <tr>
                <td>{{temp_dic.No}}</td>
                <td>{{temp_dic.Code}}</td>
                <td>
                     {{temp_dic.Name}}
                </td>
                <td>{{temp_dic.GNP}}</td>
                <td>{{temp_dic.Population}}</td>
            </tr>
            {% endfor %}





---------------------------------------------------
23. 특정 단어가 들어가는 레코드 검색하여 파일로 출력하기 
---------------------------------------------------

// 실습 과정 

1) db.py 파일에 특정 레코드만 검색하여 결과를 반환하는 함수 정의 

# 특정 레코드 목록을 가져오는 함수
def search_country_list(country_name) :
    # 데이터베이스 접속
    conn = get_connection()

    # 작업변수 생성
    cursor = conn.cursor()

    # 쿼리문
    # sql = '''SELECT * FROM worldCity  where Name = %s  '''
    sql = '''SELECT * FROM worldCity  where Name LIKE %s  '''
    country_name = '%'+country_name+'%'
    cursor.execute(sql, country_name)

    # 결과를 가져온다.
    result = cursor.fetchall()

    # 데이터를 추출한다.
    temp_list = []
    for row in result:
        temp_dic = {}

        temp_dic['No'] = row[0]
        temp_dic['Code'] = row[1]
        temp_dic['Name'] = row[2]
        temp_dic['GNP'] = row[3]
        temp_dic['Population'] = row[4]
        temp_list.append(temp_dic)

    conn.close()
    return temp_list

# 특정 레코드만 표시하기
result = search_country_list('korea')
for i in result:
    print(i)

result = search_country_list('e')
for i in result:
    print(i)



2) app.py 파일에 특정 단어를 검색하여 html 문서로 반환하는 라우터 함수 추가 

- 라우터 주소 및 라우터 함수 정의 
- 라우터 함수 안에서 db에 정의된 함수 이용하여 
  country_name으로 테이블을 검색한 후 
  테이블=>딕셔너리 리스트를 return 문을 이용하여 html 문서로 반환

# 검색 결과를 반환하여 html 파일로 전달 
@app.route('/search_list')
def search_country_list() :
    country_name = 'S'
    # country_name = 'korea'
    country_list = db.search_country_list(country_name)
    return render_template('search_country_list.html', country_list=country_list)


3)search_country_list.html
- country_list.html 문서와 같은 구조로 파일명 교체하여 저장 
- for 문과 템플릿 문법 이용하여 검색결과의 테이블의 레코드를 표 구조로 출력 

<!--  행인덱스[키], 행인덱스.키명 으로 접근 -->
            {% for temp_dic in country_list %}
            <tr>
                <td>{{temp_dic.No}}</td>
                <td>{{temp_dic.Code}}</td>
                <td>
                     {{temp_dic.Name}}
                </td>
                <td>{{temp_dic.GNP}}</td>
                <td>{{temp_dic.Population}}</td>
            </tr>
            {% endfor %}



4) /search_list 라우터주소를 입력하여 레코드 결과 확인 





---------------------------------------------------
24. 검색폼과 연결하여 검색 결과 출력하기 
---------------------------------------------------

// 실습 과정 


1) index_db.html 파일에 검색폼 삽입
- action 값은 처리결과 후 이동할 페이지 주소 
- 텍스트필드는 required 속성값 삽입. 필수 항목으로 지정

        <form action="search_list" method="get">
            <input type="text" name="country_name" required/>
            <button type="submit">검색</button>
        </form>


2) db.py 파일은 기존 파일 그대로 유지 



3) app.py 파일

- 검색폼 페이지로 이동하는 라우터 함수 정의 

# 시작 페이지 주소 
@app.route('/')
def index():
    return render_template('index_db.html')


- 검색폼 값을 받아 검색 결과를 반환하여 html 파일로 전달 
- request.args.get()을 이용 

@app.route('/search_list')
def search_country_list() :
    # 검색어를 폼으로부터 get 방식으로 전달받는다.
    country_name = request.args.get('country_name')
    print(country_name)
    country_list = db.search_country_list(country_name)
    return render_template('search_country_list.html', country_list=country_list)
 


4)search_country_list.html
- 하이퍼링크 소스 추가 

<p><a href="/">첫페이지로 이동하기</a></p>







---------------------------------------------------
25. 하이퍼링크와 연결하여 나라별 상세 페이지 결과 출력하기 
---------------------------------------------------

- 쿼리스트링방식 : 라우터주소/레코드No값
하이퍼링크의 url 값에 레코드의 기본키값인 No 값을 전달한다. 

- 쿼리스트링방식의 데이타 이용 라우터 주소 생성 
@app.route('/라우터주소/<변수>')
def 라우터함수(변수) :


- fetchone() 함수를 이용하여 레코드No에 해당하는 데이타 탐색
- 튜플로 저장후 전달 


// 실습 과정 


1) country_list.html 파일에 나라별 하이퍼링크 삽입

- 1행에 Link 셀 추가 
<th>Link</th>

- for 반복문 셀안에서 상세페이지 연결 하이퍼링크 셀 추가 
- 하이퍼링크 주소는 '라우터주소/{{temp_dic.No}}' 으로 
  No 데이타를 쿼리스트링 방식으로 전달 

 <td>
   <a href="/country/{{temp_dic.No}}">Datail Page</a>
 </td>


2) db.py 파일에서 No 값으로 특정 레코드 찾기 함수 추가 
- fetchone()을 이용하여 sql 실행후 1개의 레코드 찾기 
- 반환형태는 1개의 레코드가 저장된 튜플 

# No로 나라 레코드 검색하여 반환 
def country(country_no) :
    # 데이터베이스 접속
    conn = get_connection()
    # 작업변수 생성
    cursor = conn.cursor()

    # 쿼리문
    # FORMAT(GNP,소수점자리수) : 3자리마다 쉼표 출력. 
    sql = '''SELECT No, Code, Name, FORMAT(GNP,1), FORMAT(Population,0) FROM worldCity  where No = %s  '''
    cursor.execute(sql, country_no)

    # 결과를 가져온다. => 튜플 형태 
    result = cursor.fetchone()

    # 데이터를 추출한다.
    temp_dic = {}
    temp_dic['No'] = result[0]
    temp_dic['Code'] = result[1]
    temp_dic['Name'] = result[2]
    temp_dic['GNP'] = result[3]
    temp_dic['Population'] = result[4]

    conn.close()
    return temp_dic


3) app.py 파일에 No로 레코드를 찾아 html 문서에 전달하는 
   라우터 함수 추가 

# 하이퍼링크 값을 전달받아 HTML 파일로 출력 
@app.route('/country/<country_no>')
def country(country_no) :
    country_dict = db.country(country_no)
    return render_template('country.html', country_dict=country_dict)


4) country.html 생성후 특정 레코드 출력 

<h1>Country Detail Page</h1>
<table border="1">
        <thead>
            <tr>
                <th colspan="2" style="text-align: center;font-size:2em">{{ country_dict.Name }} </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th>Country Number</th>
                <td>{{ country_dict.No }}</td>
            </tr>
            <tr>
                <th>Country Code</th>
                <td>{{ country_dict.Code }}</td>
            </tr>
            <tr>
                <th>Country GNP</th>
                <td>$ {{ country_dict.GNP }}</td>
            </tr>
            <tr>
                <th>Country Population</th>
                <td>{{ country_dict.Population }}</td>
            </tr>
        </tbody>
    </table>

    <hr>
    <p><a href="/">첫페이지로 이동하기</a></p>



---------------------------------------------------
26. 폼을 이용하여 DB 테이블에 레코드 추가하기 
---------------------------------------------------




1) country_add.html 새로 생성 
- 레코드를 추가할 수 있는 폼문서 만들기
- method는 post 방식이며 action은 레코드를 추가할 수 있는 라우터 주소로 연결한다. 

  <form action="/country_add_pro" method="post">
    <label>CODE <input type="text" name="c_code" id="c_code" required></label>
    <label>NAME <input type="text" name="c_name" id="c_name" required></label>
    <label>GNP <input type="text" name="c_gnp" id="c_gnp" required></label>
    <label>POPULATION <input type="text" name="c_population" id="c_population" required></label>
    <br>
    <button type="submit"> SUBMIT </button>
    <button type="reset"> RESET </button>
  </form>



2) db.py 
- 레코드를 추가할 수 있는 함수 생성 

# 레코드 추가 함수
def country_add(c_code, c_name, c_gnp, c_population):

    # 데이타베이스 접속함수 호출
    conn = get_connection()

    # 작업변수 생성
    cursor = conn.cursor()

    # 레코드 추가와 관련된 sql
    # INSERT INTO 테이블명 (컬럼명1,...,컬럼명n) VALUES (값1, ... 값N);
    # 레코드 삭제와 관련된 sql 
    # DELETE from 테이블명 where 조건식;
    sql = '''
            insert into worldCity
                (code, name, gnp, population)
                values (%s, %s, %s, %s)
            '''
              
    cursor.execute(sql, (c_code, c_name, c_gnp, c_population))
    conn.commit()

    conn.close()

# 레코드 추가 테스트 
# country_add('FIN', 'Finland', 121914.00, 1376)


- 모든 레코드를 No을 기준으로 출력할 수 있도록 
  get_country_list() 함수에서 sql문 수정 

sql = '''SELECT * FROM worldCity ORDER BY no DESC '''


3) app.py 
- 레코드 추가 페이지로 이동하는 라우터 주소 생성 
- 레코드 추가 폼 문서의 action에 연결하는 레코드 추가 실행과 관련된 라우터 주소 생성 

# 레코드 추가 페이지
@app.route('/country_add')
def country_add():
    return render_template('country_add.html')


# 레코드 추가 후 country_list.html로 이동
@app.route('/country_add_pro', methods=['post'])
def country_add_pro():
    c_code = request.form['c_code']
    c_name = request.form['c_name']
    c_gnp = request.form['c_gnp']
    c_population = request.form['c_population']
    print(c_code, c_name, c_gnp, c_population)
    db.country_add(c_code, c_name, c_gnp, c_population)
    return redirect(url_for('country_list'))




4) index_db.html 

- 레코드 추가 폼문서로 이동하는 하이퍼링크 추가 

<li><a href="/country_add">레코드 추가</a></li>



5) country_list.html
- No 컬럼과 관련된 셀 삭제 






---------------------------------------------------
27. 버튼 클릭시 관련 레코드 삭제하기 
---------------------------------------------------

// 실습 과정 

1) country_list.html 수정 
- 레코드 삭제 페이지와 연결되는 하이퍼링크 셀 추가 
- 쿼리스트링 방식으로 관련 레코드를 표시하도록 하이퍼링크 주소 연결 

<!-- 제목셀 -->
<th>Delete</th>


<!-- 삭제페이지 연결 하이퍼링크 셀 추가  -->
 <td>
    <a href="/country_delete/{{temp_dic.No}}">Delete Page</a>
</td>



2) country_delete.html 새로 생성 
- country.html 파일을 다른이름으로 저장해서 생성 
- 삭제 레코드의 내용 표시 
- 삭제가 실행되는 하이퍼링크는 쿼리스트링방식으로 레코드의 No 값을 전달해야한다.  
- 삭제 취소시 country_list.html로 이동하는 하이퍼링크 추가 

<p> 정말로 레코드를 삭제하시겠습니다. <br>
      <a href="/country_delete_pro/{{country_dict.No}}">네</a>
      &nbsp;&nbsp; || &nbsp;&nbsp;
      <a href="/country_list">아니오</a>
</p>



3) db.py 
- 레코드를 삭제할 수 있는 함수 생성 

# 레코드 삭제 함수 
def country_delete(country_no):

    # 데이타베이스 접속함수 호출
    conn = get_connection()
    cursor = conn.cursor()

    # 레코드 삭제와 관련된 sql 
    # DELETE from 테이블명 where 조건식;
    sql = '''
            delete from worldCity
                where No = %s
            '''
              
    cursor.execute(sql, (country_no))
    conn.commit()
    conn.close()

# 레코드 삭제 테스트 
# country_delete(5)


4) app.py 
- 레코드 삭제 확인 페이지로 이동하는 라우터 주소 생성 
- 레코드 삭제 페이지에서 확인 클릭시 레코드 삭제 실행되는 라우터 주소 생성 

# 레코드 삭제 확인 페이지
# 쿼리스트링 방식
@app.route('/country_delete/<country_no>')
def country_delete(country_no) :
    country_dict = db.country(country_no)
    return render_template('country_delete.html', country_dict=country_dict)


# 레코드 삭제 후  country_list.html로 이동
@app.route('/country_delete_pro/<country_no>')
def country_delete_pro(country_no):
    db.country_delete(country_no)
    # 시작페이지로 이동 redirect('라우터주소')
    # return redirect('/')
    # country_list() 함수의 라우터 주소로 이동 
    # redirect(url_for('라우터함수명'))
    return redirect(url_for('country_list'))




---------------------------------------------------
28. 레코드 수정하기 
---------------------------------------------------

// 실습 과정 

1) country_list.html 수정 
- 레코드 수정 페이지와 연결되는 하이퍼링크 셀 추가 
- 쿼리스트링 방식으로 관련 레코드를 표시하도록 하이퍼링크 주소 연결 

<!-- 제목셀 -->
<th>Update</th>


<!-- 수정페이지 연결 하이퍼링크 셀 추가  -->
<td>
    <a href="/country_update/{{temp_dic.No}}">Update Page</a>
</td>



2) country_update.html 새로 생성 
- country_add.html 파일을 다른이름으로 저장해서 생성 
- No 컬럼값은 hidden 으로 지정하여 보이지 않게 한다. 
- Code, Name 컬럼값은 텍스트로 표시 
- GNP, POPULATION 컬럼값은 텍스트필드의 value 속성값에 전달하여 
  표시하며 수정가능하도록 한다. 

<form action="/country_update_pro" method="post">
    <!-- hidden 필드로 지정  -->
    <input type="hidden" name="c_no" value={{ country_dict.No }}>
    <label>CODE : {{ country_dict.Code }} </label>
    <label>NAME : {{ country_dict.Name }} </label>
    <label>GNP <input type="text" name="c_gnp" id="c_gnp" value={{ country_dict.GNP }} required ></label>
    <label>POPULATION <input type="text" name="c_population" id="c_population" value={{ country_dict.Population }} required></label>
    <br>
    <button type="submit"> SUBMIT </button>
    <button type="reset"> RESET </button>
  </form>


3) db.py 

- 레코드 상세 출력 함수 country()의 sql 문 수정 

    # sql = '''SELECT No, Code, Name, FORMAT(GNP,1), FORMAT(Population,0) FROM worldCity  where No = %s  '''
    sql = '''SELECT No, Code, Name, GNP, Population FROM worldCity  where No = %s  '''



- 레코드를 수정할 수 있는 함수 생성 

# 레코드 수정 함수
# gnp, population 컬럼만 수정 
# update 테이블명 set 컬럼명=값 where 조건식
def country_update(c_no, c_gnp, c_population):
    # 데이타베이스 접속함수 호출
    conn = get_connection()
    # 작업변수 생성
    cursor = conn.cursor()

    # 레코드 수정 sql 구문 
    sql = '''
            update worldcity
                set 
                    GNP=%s,
                    Population=%s
                where No=%s
            '''

    cursor.execute(sql, (c_gnp, c_population, c_no))
    conn.commit()
    conn.close()

# 레코드 수정 테스트 
# 37 34000 776.00	
# country_update(37, 55000, 500)



4) app.py 
- 레코드 수정 페이지로 이동하는 라우터 주소 생성 
- 레코드 수정 페이지에서 Submit 버튼 클릭시 레코드 수정이 실행되는 라우터 주소 생성 

# 레코드 수정 페이지 
# 쿼리스트링 방식
@app.route('/country_update/<country_no>')
def country_update(country_no) :
    country_dict = db.country(country_no)
    return render_template('country_update.html', country_dict=country_dict)



# 레코드 수정 후  country_list.html로 이동
@app.route('/country_update_pro', methods=['post'])
def country_update_pro():
    c_no = request.form['c_no']
    c_gnp = request.form['c_gnp']
    c_population = request.form['c_population']
    db.country_update(c_no, c_gnp, c_population)
    return redirect(url_for('country_list'))



